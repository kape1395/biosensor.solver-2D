// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "ModelBound.hxx"

namespace bio
{
  namespace xml
  {
    namespace model
    {
      namespace bound
      {
        // Constant
        // 

        const Constant::concentration_type& Constant::
        concentration () const
        {
          return this->concentration_.get ();
        }

        Constant::concentration_type& Constant::
        concentration ()
        {
          return this->concentration_.get ();
        }

        void Constant::
        concentration (const concentration_type& concentration)
        {
          this->concentration_.set (concentration);
        }

        void Constant::
        concentration (::std::auto_ptr< concentration_type > concentration)
        {
          this->concentration_.set (concentration);
        }


        // Wall
        // 


        // Merge
        // 


        // Null
        // 
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace bio
{
  namespace xml
  {
    namespace model
    {
      namespace bound
      {
        // Constant
        //

        Constant::
        Constant (const name_type& name,
                  const concentration_type& concentration)
        : ::bio::xml::model::BoundSubstance (name),
          concentration_ (concentration, ::xml_schema::flags (), this)
        {
        }

        Constant::
        Constant (const Constant& x,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
        : ::bio::xml::model::BoundSubstance (x, f, c),
          concentration_ (x.concentration_, f, this)
        {
        }

        Constant::
        Constant (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::type* c)
        : ::bio::xml::model::BoundSubstance (e, f | ::xml_schema::flags::base, c),
          concentration_ (f, this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e);
            this->parse (p, f);
          }
        }

        void Constant::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::bio::xml::model::BoundSubstance::parse (p, f);

          p.reset_attributes ();

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "concentration" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< concentration_type > r (
                concentration_traits::create (i, f, this));

              this->concentration (r);
              continue;
            }
          }

          if (!concentration_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "concentration",
              "");
          }
        }

        Constant* Constant::
        _clone (::xml_schema::flags f,
                ::xml_schema::type* c) const
        {
          return new Constant (*this, f, c);
        }

        static
        ::xsd::cxx::tree::type_factory_initializer< 0, char, Constant >
        _xsd_Constant_type_factory_init (
          "Constant",
          "http://lt.5grupe.karolis/biosensor/model/bound");


        // Wall
        //

        Wall::
        Wall (const name_type& name)
        : ::bio::xml::model::BoundSubstance (name)
        {
        }

        Wall::
        Wall (const Wall& x,
              ::xml_schema::flags f,
              ::xml_schema::type* c)
        : ::bio::xml::model::BoundSubstance (x, f, c)
        {
        }

        Wall::
        Wall (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::type* c)
        : ::bio::xml::model::BoundSubstance (e, f, c)
        {
        }

        Wall* Wall::
        _clone (::xml_schema::flags f,
                ::xml_schema::type* c) const
        {
          return new Wall (*this, f, c);
        }

        static
        ::xsd::cxx::tree::type_factory_initializer< 0, char, Wall >
        _xsd_Wall_type_factory_init (
          "Wall",
          "http://lt.5grupe.karolis/biosensor/model/bound");


        // Merge
        //

        Merge::
        Merge (const name_type& name)
        : ::bio::xml::model::BoundSubstance (name)
        {
        }

        Merge::
        Merge (const Merge& x,
               ::xml_schema::flags f,
               ::xml_schema::type* c)
        : ::bio::xml::model::BoundSubstance (x, f, c)
        {
        }

        Merge::
        Merge (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::type* c)
        : ::bio::xml::model::BoundSubstance (e, f, c)
        {
        }

        Merge* Merge::
        _clone (::xml_schema::flags f,
                ::xml_schema::type* c) const
        {
          return new Merge (*this, f, c);
        }

        static
        ::xsd::cxx::tree::type_factory_initializer< 0, char, Merge >
        _xsd_Merge_type_factory_init (
          "Merge",
          "http://lt.5grupe.karolis/biosensor/model/bound");


        // Null
        //

        Null::
        Null (const name_type& name)
        : ::bio::xml::model::BoundSubstance (name)
        {
        }

        Null::
        Null (const Null& x,
              ::xml_schema::flags f,
              ::xml_schema::type* c)
        : ::bio::xml::model::BoundSubstance (x, f, c)
        {
        }

        Null::
        Null (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::type* c)
        : ::bio::xml::model::BoundSubstance (e, f, c)
        {
        }

        Null* Null::
        _clone (::xml_schema::flags f,
                ::xml_schema::type* c) const
        {
          return new Null (*this, f, c);
        }

        static
        ::xsd::cxx::tree::type_factory_initializer< 0, char, Null >
        _xsd_Null_type_factory_init (
          "Null",
          "http://lt.5grupe.karolis/biosensor/model/bound");
      }
    }
  }
}

#include <istream>
#include <xercesc/framework/Wrapper4InputSource.hpp>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace bio
{
  namespace xml
  {
    namespace model
    {
      namespace bound
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/xml/dom/serialization-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace bio
{
  namespace xml
  {
    namespace model
    {
      namespace bound
      {
        void
        operator<< (::xercesc::DOMElement& e, const Constant& i)
        {
          e << static_cast< const ::bio::xml::model::BoundSubstance& > (i);

          // concentration
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "concentration",
                e));

            a << i.concentration ();
          }
        }

        static
        ::xsd::cxx::tree::type_serializer_initializer< 0, char, Constant >
        _xsd_Constant_type_serializer_init (
          "Constant",
          "http://lt.5grupe.karolis/biosensor/model/bound");


        void
        operator<< (::xercesc::DOMElement& e, const Wall& i)
        {
          e << static_cast< const ::bio::xml::model::BoundSubstance& > (i);
        }

        static
        ::xsd::cxx::tree::type_serializer_initializer< 0, char, Wall >
        _xsd_Wall_type_serializer_init (
          "Wall",
          "http://lt.5grupe.karolis/biosensor/model/bound");


        void
        operator<< (::xercesc::DOMElement& e, const Merge& i)
        {
          e << static_cast< const ::bio::xml::model::BoundSubstance& > (i);
        }

        static
        ::xsd::cxx::tree::type_serializer_initializer< 0, char, Merge >
        _xsd_Merge_type_serializer_init (
          "Merge",
          "http://lt.5grupe.karolis/biosensor/model/bound");


        void
        operator<< (::xercesc::DOMElement& e, const Null& i)
        {
          e << static_cast< const ::bio::xml::model::BoundSubstance& > (i);
        }

        static
        ::xsd::cxx::tree::type_serializer_initializer< 0, char, Null >
        _xsd_Null_type_serializer_init (
          "Null",
          "http://lt.5grupe.karolis/biosensor/model/bound");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

