// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from Model.xsd.
 */

#ifndef MODEL_HXX
#define MODEL_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/version.hxx>

#if (XSD_INT_VERSION != 3000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/tree/parsing.hxx>

#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/xml/dom/serialization-header.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type<type> simple_type;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef integer non_positive_integer;
  typedef integer non_negative_integer;
  typedef integer positive_integer;
  typedef integer negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken> nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< type, char, ncname > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::day< char, simple_type > day;
  typedef ::xsd::cxx::tree::month< char, simple_type > month;
  typedef ::xsd::cxx::tree::month_day< char, simple_type > month_day;
  typedef ::xsd::cxx::tree::year< char, simple_type > year;
  typedef ::xsd::cxx::tree::year_month< char, simple_type > year_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information. Used in serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info < char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap < char > namespace_infomap;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // DOM user data key for back pointers to tree nodes.
  //
#ifndef XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA

  const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;

#endif

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::serialization< char > serialization;
  typedef ::xsd::cxx::tree::no_namespace_mapping< char > no_namespace_mapping;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::xsi_already_in_use< char > xsi_already_in_use;
  typedef ::xsd::cxx::tree::bounds< char > bounds;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Error handler interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;
}

// Forward declarations.
//
namespace bio
{
  namespace xml
  {
    namespace model
    {
      class Model;
      class Axis;
      class AxisPoint;
      class Substance;
      class Medium;
      class MediumSubstance;
      class MediumReaction;
      class MediumArea;
      class Bound;
      class BoundSubstance;
      class Transducer;
      class Symbol;
      class Solver;
      class SolverOutput;
      class CoordinateSystem;
      class SubstanceName;
      class MediumName;
      class AxisName;
      class BoundName;
      class TransducerName;
      class SymbolName;
    }
  }
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace bio
{
  namespace xml
  {
    /**
     * @brief C++ namespace for the %http://lt.5grupe.karolis/biosensor/model
     * schema namespace.
     */
    namespace model
    {
      /**
       * @brief Class corresponding to the %Model schema type.
       *
       * @nosubgrouping
       */
      class Model: public ::xml_schema::type
      {
        public:
        /**
         * @name axis
         *
         * @brief Accessor and modifier functions for the %axis
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::bio::xml::model::Axis axis_type;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< axis_type > axis_sequence;

        /**
         * @brief Element iterator type.
         */
        typedef axis_sequence::iterator axis_iterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef axis_sequence::const_iterator axis_const_iterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< axis_type, char > axis_traits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const axis_sequence&
        axis () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        axis_sequence&
        axis ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        axis (const axis_sequence& s);

        //@}

        /**
         * @name substance
         *
         * @brief Accessor and modifier functions for the %substance
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::bio::xml::model::Substance substance_type;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< substance_type > substance_sequence;

        /**
         * @brief Element iterator type.
         */
        typedef substance_sequence::iterator substance_iterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef substance_sequence::const_iterator substance_const_iterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< substance_type, char > substance_traits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const substance_sequence&
        substance () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        substance_sequence&
        substance ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        substance (const substance_sequence& s);

        //@}

        /**
         * @name medium
         *
         * @brief Accessor and modifier functions for the %medium
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::bio::xml::model::Medium medium_type;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< medium_type > medium_sequence;

        /**
         * @brief Element iterator type.
         */
        typedef medium_sequence::iterator medium_iterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef medium_sequence::const_iterator medium_const_iterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< medium_type, char > medium_traits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const medium_sequence&
        medium () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        medium_sequence&
        medium ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        medium (const medium_sequence& s);

        //@}

        /**
         * @name bound
         *
         * @brief Accessor and modifier functions for the %bound
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::bio::xml::model::Bound bound_type;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< bound_type > bound_sequence;

        /**
         * @brief Element iterator type.
         */
        typedef bound_sequence::iterator bound_iterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef bound_sequence::const_iterator bound_const_iterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< bound_type, char > bound_traits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const bound_sequence&
        bound () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        bound_sequence&
        bound ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        bound (const bound_sequence& s);

        //@}

        /**
         * @name transducer
         *
         * @brief Accessor and modifier functions for the %transducer
         * optional element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::bio::xml::model::Transducer transducer_type;

        /**
         * @brief Element optional container type.
         */
        typedef ::xsd::cxx::tree::optional< transducer_type > transducer_optional;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< transducer_type, char > transducer_traits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const transducer_optional&
        transducer () const;

        /**
         * @brief Return a read-write reference to the element container.
         *
         * @return A reference to the optional container.
         */
        transducer_optional&
        transducer ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        transducer (const transducer_type& x);

        /**
         * @brief Set the element value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the element.
         * Otherwise the element container is set the 'not present' state.
         */
        void
        transducer (const transducer_optional& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        transducer (::std::auto_ptr< transducer_type > p);

        //@}

        /**
         * @name symbol
         *
         * @brief Accessor and modifier functions for the %symbol
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::bio::xml::model::Symbol symbol_type;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< symbol_type > symbol_sequence;

        /**
         * @brief Element iterator type.
         */
        typedef symbol_sequence::iterator symbol_iterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef symbol_sequence::const_iterator symbol_const_iterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< symbol_type, char > symbol_traits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const symbol_sequence&
        symbol () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        symbol_sequence&
        symbol ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        symbol (const symbol_sequence& s);

        //@}

        /**
         * @name solver
         *
         * @brief Accessor and modifier functions for the %solver
         * required element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::bio::xml::model::Solver solver_type;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< solver_type, char > solver_traits;

        /**
         * @brief Return a read-only (constant) reference to the element.
         *
         * @return A constant reference to the element.
         */
        const solver_type&
        solver () const;

        /**
         * @brief Return a read-write reference to the element.
         *
         * @return A reference to the element.
         */
        solver_type&
        solver ();

        /**
         * @brief Set the element value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the element.
         */
        void
        solver (const solver_type& x);

        /**
         * @brief Set the element value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        solver (::std::auto_ptr< solver_type > p);

        //@}

        /**
         * @name coordinateSystem
         *
         * @brief Accessor and modifier functions for the %coordinateSystem
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::bio::xml::model::CoordinateSystem coordinateSystem_type;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< coordinateSystem_type, char > coordinateSystem_traits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const coordinateSystem_type&
        coordinateSystem () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        coordinateSystem_type&
        coordinateSystem ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        coordinateSystem (const coordinateSystem_type& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        coordinateSystem (::std::auto_ptr< coordinateSystem_type > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Construct an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        Model (const solver_type&,
               const coordinateSystem_type&);

        /**
         * @brief Construct an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        Model (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::type* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the _clone function instead.
         */
        Model (const Model& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::type* c = 0);

        /**
         * @brief Copy the object polymorphically.
         *
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of an instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual Model*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0) const;

        //@}

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        private:
        axis_sequence axis_;
        substance_sequence substance_;
        medium_sequence medium_;
        bound_sequence bound_;
        transducer_optional transducer_;
        symbol_sequence symbol_;
        ::xsd::cxx::tree::one< solver_type > solver_;
        ::xsd::cxx::tree::one< coordinateSystem_type > coordinateSystem_;
      };

      /**
       * @brief Class corresponding to the %Axis schema type.
       *
       * @nosubgrouping
       */
      class Axis: public ::xml_schema::type
      {
        public:
        /**
         * @name point
         *
         * @brief Accessor and modifier functions for the %point
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::bio::xml::model::AxisPoint point_type;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< point_type > point_sequence;

        /**
         * @brief Element iterator type.
         */
        typedef point_sequence::iterator point_iterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef point_sequence::const_iterator point_const_iterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< point_type, char > point_traits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const point_sequence&
        point () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        point_sequence&
        point ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        point (const point_sequence& s);

        //@}

        /**
         * @name name
         *
         * @brief Accessor and modifier functions for the %name
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::bio::xml::model::AxisName name_type;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const name_type&
        name () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        name_type&
        name ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        name (const name_type& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        name (::std::auto_ptr< name_type > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Construct an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        Axis (const name_type&);

        /**
         * @brief Construct an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        Axis (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::type* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the _clone function instead.
         */
        Axis (const Axis& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::type* c = 0);

        /**
         * @brief Copy the object polymorphically.
         *
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of an instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual Axis*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0) const;

        //@}

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        private:
        point_sequence point_;
        ::xsd::cxx::tree::one< name_type > name_;
      };

      /**
       * @brief Class corresponding to the %AxisPoint schema type.
       *
       * @nosubgrouping
       */
      class AxisPoint: public ::xml_schema::type
      {
        public:
        /**
         * @name position
         *
         * @brief Accessor and modifier functions for the %position
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::bio::xml::model::SymbolName position_type;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< position_type, char > position_traits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const position_type&
        position () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        position_type&
        position ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        position (const position_type& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        position (::std::auto_ptr< position_type > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Construct an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        AxisPoint (const position_type&);

        /**
         * @brief Construct an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        AxisPoint (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::type* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the _clone function instead.
         */
        AxisPoint (const AxisPoint& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::type* c = 0);

        /**
         * @brief Copy the object polymorphically.
         *
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of an instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual AxisPoint*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0) const;

        //@}

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        private:
        ::xsd::cxx::tree::one< position_type > position_;
      };

      /**
       * @brief Class corresponding to the %Substance schema type.
       *
       * @nosubgrouping
       */
      class Substance: public ::xml_schema::type
      {
        public:
        /**
         * @name name
         *
         * @brief Accessor and modifier functions for the %name
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::bio::xml::model::SubstanceName name_type;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const name_type&
        name () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        name_type&
        name ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        name (const name_type& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        name (::std::auto_ptr< name_type > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Construct an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        Substance (const name_type&);

        /**
         * @brief Construct an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        Substance (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::type* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the _clone function instead.
         */
        Substance (const Substance& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::type* c = 0);

        /**
         * @brief Copy the object polymorphically.
         *
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of an instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual Substance*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0) const;

        //@}

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        private:
        ::xsd::cxx::tree::one< name_type > name_;
      };

      /**
       * @brief Class corresponding to the %Medium schema type.
       *
       * @nosubgrouping
       */
      class Medium: public ::xml_schema::type
      {
        public:
        /**
         * @name substance
         *
         * @brief Accessor and modifier functions for the %substance
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::bio::xml::model::MediumSubstance substance_type;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< substance_type > substance_sequence;

        /**
         * @brief Element iterator type.
         */
        typedef substance_sequence::iterator substance_iterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef substance_sequence::const_iterator substance_const_iterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< substance_type, char > substance_traits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const substance_sequence&
        substance () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        substance_sequence&
        substance ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        substance (const substance_sequence& s);

        //@}

        /**
         * @name reaction
         *
         * @brief Accessor and modifier functions for the %reaction
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::bio::xml::model::MediumReaction reaction_type;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< reaction_type > reaction_sequence;

        /**
         * @brief Element iterator type.
         */
        typedef reaction_sequence::iterator reaction_iterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef reaction_sequence::const_iterator reaction_const_iterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< reaction_type, char > reaction_traits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const reaction_sequence&
        reaction () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        reaction_sequence&
        reaction ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        reaction (const reaction_sequence& s);

        //@}

        /**
         * @name area
         *
         * @brief Accessor and modifier functions for the %area
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::bio::xml::model::MediumArea area_type;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< area_type > area_sequence;

        /**
         * @brief Element iterator type.
         */
        typedef area_sequence::iterator area_iterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef area_sequence::const_iterator area_const_iterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< area_type, char > area_traits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const area_sequence&
        area () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        area_sequence&
        area ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        area (const area_sequence& s);

        //@}

        /**
         * @name name
         *
         * @brief Accessor and modifier functions for the %name
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::bio::xml::model::MediumName name_type;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const name_type&
        name () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        name_type&
        name ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        name (const name_type& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        name (::std::auto_ptr< name_type > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Construct an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        Medium (const name_type&);

        /**
         * @brief Construct an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        Medium (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the _clone function instead.
         */
        Medium (const Medium& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0);

        /**
         * @brief Copy the object polymorphically.
         *
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of an instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual Medium*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0) const;

        //@}

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        private:
        substance_sequence substance_;
        reaction_sequence reaction_;
        area_sequence area_;
        ::xsd::cxx::tree::one< name_type > name_;
      };

      /**
       * @brief Class corresponding to the %MediumSubstance schema type.
       *
       * @nosubgrouping
       */
      class MediumSubstance: public ::xml_schema::type
      {
        public:
        /**
         * @name name
         *
         * @brief Accessor and modifier functions for the %name
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::bio::xml::model::SubstanceName name_type;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const name_type&
        name () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        name_type&
        name ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        name (const name_type& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        name (::std::auto_ptr< name_type > p);

        //@}

        /**
         * @name diffusion
         *
         * @brief Accessor and modifier functions for the %diffusion
         * optional attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::bio::xml::model::SymbolName diffusion_type;

        /**
         * @brief Attribute optional container type.
         */
        typedef ::xsd::cxx::tree::optional< diffusion_type > diffusion_optional;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< diffusion_type, char > diffusion_traits;

        /**
         * @brief Return a read-only (constant) reference to the attribute
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const diffusion_optional&
        diffusion () const;

        /**
         * @brief Return a read-write reference to the attribute container.
         *
         * @return A reference to the optional container.
         */
        diffusion_optional&
        diffusion ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        diffusion (const diffusion_type& x);

        /**
         * @brief Set the attribute value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the attribute.
         * Otherwise the attribute container is set the 'not present' state.
         */
        void
        diffusion (const diffusion_optional& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        diffusion (::std::auto_ptr< diffusion_type > p);

        //@}

        /**
         * @name initial
         *
         * @brief Accessor and modifier functions for the %initial
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::bio::xml::model::SymbolName initial_type;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< initial_type, char > initial_traits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const initial_type&
        initial () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        initial_type&
        initial ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        initial (const initial_type& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        initial (::std::auto_ptr< initial_type > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Construct an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        MediumSubstance (const name_type&,
                         const initial_type&);

        /**
         * @brief Construct an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        MediumSubstance (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::type* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the _clone function instead.
         */
        MediumSubstance (const MediumSubstance& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::type* c = 0);

        /**
         * @brief Copy the object polymorphically.
         *
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of an instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual MediumSubstance*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0) const;

        //@}

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        private:
        ::xsd::cxx::tree::one< name_type > name_;
        diffusion_optional diffusion_;
        ::xsd::cxx::tree::one< initial_type > initial_;
      };

      /**
       * @brief Class corresponding to the %MediumReaction schema type.
       *
       * @nosubgrouping
       */
      class MediumReaction: public ::xml_schema::type
      {
        public:
        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Construct an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        MediumReaction ();

        /**
         * @brief Construct an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        MediumReaction (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::type* c = 0);

        /**
         * @brief Construct an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        MediumReaction (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::type* c = 0);

        /**
         * @brief Construct an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A DOM element containing the string fragment.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        MediumReaction (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::type* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the _clone function instead.
         */
        MediumReaction (const MediumReaction& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::type* c = 0);

        /**
         * @brief Copy the object polymorphically.
         *
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of an instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual MediumReaction*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0) const;

        //@}
      };

      /**
       * @brief Class corresponding to the %MediumArea schema type.
       *
       * @nosubgrouping
       */
      class MediumArea: public ::xml_schema::type
      {
        public:
        /**
         * @name top
         *
         * @brief Accessor and modifier functions for the %top
         * optional attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::bio::xml::model::SymbolName top_type;

        /**
         * @brief Attribute optional container type.
         */
        typedef ::xsd::cxx::tree::optional< top_type > top_optional;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< top_type, char > top_traits;

        /**
         * @brief Return a read-only (constant) reference to the attribute
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const top_optional&
        top () const;

        /**
         * @brief Return a read-write reference to the attribute container.
         *
         * @return A reference to the optional container.
         */
        top_optional&
        top ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        top (const top_type& x);

        /**
         * @brief Set the attribute value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the attribute.
         * Otherwise the attribute container is set the 'not present' state.
         */
        void
        top (const top_optional& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        top (::std::auto_ptr< top_type > p);

        //@}

        /**
         * @name bottom
         *
         * @brief Accessor and modifier functions for the %bottom
         * optional attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::bio::xml::model::SymbolName bottom_type;

        /**
         * @brief Attribute optional container type.
         */
        typedef ::xsd::cxx::tree::optional< bottom_type > bottom_optional;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< bottom_type, char > bottom_traits;

        /**
         * @brief Return a read-only (constant) reference to the attribute
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const bottom_optional&
        bottom () const;

        /**
         * @brief Return a read-write reference to the attribute container.
         *
         * @return A reference to the optional container.
         */
        bottom_optional&
        bottom ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        bottom (const bottom_type& x);

        /**
         * @brief Set the attribute value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the attribute.
         * Otherwise the attribute container is set the 'not present' state.
         */
        void
        bottom (const bottom_optional& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        bottom (::std::auto_ptr< bottom_type > p);

        //@}

        /**
         * @name left
         *
         * @brief Accessor and modifier functions for the %left
         * optional attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::bio::xml::model::SymbolName left_type;

        /**
         * @brief Attribute optional container type.
         */
        typedef ::xsd::cxx::tree::optional< left_type > left_optional;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< left_type, char > left_traits;

        /**
         * @brief Return a read-only (constant) reference to the attribute
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const left_optional&
        left () const;

        /**
         * @brief Return a read-write reference to the attribute container.
         *
         * @return A reference to the optional container.
         */
        left_optional&
        left ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        left (const left_type& x);

        /**
         * @brief Set the attribute value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the attribute.
         * Otherwise the attribute container is set the 'not present' state.
         */
        void
        left (const left_optional& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        left (::std::auto_ptr< left_type > p);

        //@}

        /**
         * @name right
         *
         * @brief Accessor and modifier functions for the %right
         * optional attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::bio::xml::model::SymbolName right_type;

        /**
         * @brief Attribute optional container type.
         */
        typedef ::xsd::cxx::tree::optional< right_type > right_optional;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< right_type, char > right_traits;

        /**
         * @brief Return a read-only (constant) reference to the attribute
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const right_optional&
        right () const;

        /**
         * @brief Return a read-write reference to the attribute container.
         *
         * @return A reference to the optional container.
         */
        right_optional&
        right ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        right (const right_type& x);

        /**
         * @brief Set the attribute value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the attribute.
         * Otherwise the attribute container is set the 'not present' state.
         */
        void
        right (const right_optional& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        right (::std::auto_ptr< right_type > p);

        //@}

        /**
         * @name from
         *
         * @brief Accessor and modifier functions for the %from
         * optional attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::bio::xml::model::SymbolName from_type;

        /**
         * @brief Attribute optional container type.
         */
        typedef ::xsd::cxx::tree::optional< from_type > from_optional;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< from_type, char > from_traits;

        /**
         * @brief Return a read-only (constant) reference to the attribute
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const from_optional&
        from () const;

        /**
         * @brief Return a read-write reference to the attribute container.
         *
         * @return A reference to the optional container.
         */
        from_optional&
        from ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        from (const from_type& x);

        /**
         * @brief Set the attribute value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the attribute.
         * Otherwise the attribute container is set the 'not present' state.
         */
        void
        from (const from_optional& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        from (::std::auto_ptr< from_type > p);

        //@}

        /**
         * @name to
         *
         * @brief Accessor and modifier functions for the %to
         * optional attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::bio::xml::model::SymbolName to_type;

        /**
         * @brief Attribute optional container type.
         */
        typedef ::xsd::cxx::tree::optional< to_type > to_optional;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< to_type, char > to_traits;

        /**
         * @brief Return a read-only (constant) reference to the attribute
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const to_optional&
        to () const;

        /**
         * @brief Return a read-write reference to the attribute container.
         *
         * @return A reference to the optional container.
         */
        to_optional&
        to ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        to (const to_type& x);

        /**
         * @brief Set the attribute value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the attribute.
         * Otherwise the attribute container is set the 'not present' state.
         */
        void
        to (const to_optional& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        to (::std::auto_ptr< to_type > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Construct an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        MediumArea ();

        /**
         * @brief Construct an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        MediumArea (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::type* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the _clone function instead.
         */
        MediumArea (const MediumArea& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::type* c = 0);

        /**
         * @brief Copy the object polymorphically.
         *
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of an instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual MediumArea*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0) const;

        //@}

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        private:
        top_optional top_;
        bottom_optional bottom_;
        left_optional left_;
        right_optional right_;
        from_optional from_;
        to_optional to_;
      };

      /**
       * @brief Class corresponding to the %Bound schema type.
       *
       * @nosubgrouping
       */
      class Bound: public ::xml_schema::type
      {
        public:
        /**
         * @name substance
         *
         * @brief Accessor and modifier functions for the %substance
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::bio::xml::model::BoundSubstance substance_type;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< substance_type > substance_sequence;

        /**
         * @brief Element iterator type.
         */
        typedef substance_sequence::iterator substance_iterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef substance_sequence::const_iterator substance_const_iterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< substance_type, char > substance_traits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const substance_sequence&
        substance () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        substance_sequence&
        substance ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        substance (const substance_sequence& s);

        //@}

        /**
         * @name name
         *
         * @brief Accessor and modifier functions for the %name
         * optional attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::bio::xml::model::BoundName name_type;

        /**
         * @brief Attribute optional container type.
         */
        typedef ::xsd::cxx::tree::optional< name_type > name_optional;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

        /**
         * @brief Return a read-only (constant) reference to the attribute
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const name_optional&
        name () const;

        /**
         * @brief Return a read-write reference to the attribute container.
         *
         * @return A reference to the optional container.
         */
        name_optional&
        name ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        name (const name_type& x);

        /**
         * @brief Set the attribute value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the attribute.
         * Otherwise the attribute container is set the 'not present' state.
         */
        void
        name (const name_optional& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        name (::std::auto_ptr< name_type > p);

        //@}

        /**
         * @name from
         *
         * @brief Accessor and modifier functions for the %from
         * optional attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::bio::xml::model::SymbolName from_type;

        /**
         * @brief Attribute optional container type.
         */
        typedef ::xsd::cxx::tree::optional< from_type > from_optional;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< from_type, char > from_traits;

        /**
         * @brief Return a read-only (constant) reference to the attribute
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const from_optional&
        from () const;

        /**
         * @brief Return a read-write reference to the attribute container.
         *
         * @return A reference to the optional container.
         */
        from_optional&
        from ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        from (const from_type& x);

        /**
         * @brief Set the attribute value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the attribute.
         * Otherwise the attribute container is set the 'not present' state.
         */
        void
        from (const from_optional& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        from (::std::auto_ptr< from_type > p);

        //@}

        /**
         * @name to
         *
         * @brief Accessor and modifier functions for the %to
         * optional attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::bio::xml::model::SymbolName to_type;

        /**
         * @brief Attribute optional container type.
         */
        typedef ::xsd::cxx::tree::optional< to_type > to_optional;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< to_type, char > to_traits;

        /**
         * @brief Return a read-only (constant) reference to the attribute
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const to_optional&
        to () const;

        /**
         * @brief Return a read-write reference to the attribute container.
         *
         * @return A reference to the optional container.
         */
        to_optional&
        to ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        to (const to_type& x);

        /**
         * @brief Set the attribute value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the attribute.
         * Otherwise the attribute container is set the 'not present' state.
         */
        void
        to (const to_optional& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        to (::std::auto_ptr< to_type > p);

        //@}

        /**
         * @name at
         *
         * @brief Accessor and modifier functions for the %at
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::bio::xml::model::SymbolName at_type;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< at_type, char > at_traits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const at_type&
        at () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        at_type&
        at ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        at (const at_type& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        at (::std::auto_ptr< at_type > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Construct an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        Bound (const at_type&);

        /**
         * @brief Construct an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        Bound (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::type* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the _clone function instead.
         */
        Bound (const Bound& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::type* c = 0);

        /**
         * @brief Copy the object polymorphically.
         *
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of an instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual Bound*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0) const;

        //@}

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        private:
        substance_sequence substance_;
        name_optional name_;
        from_optional from_;
        to_optional to_;
        ::xsd::cxx::tree::one< at_type > at_;
      };

      /**
       * @brief Class corresponding to the %BoundSubstance schema type.
       *
       * @nosubgrouping
       */
      class BoundSubstance: public ::xml_schema::type
      {
        public:
        /**
         * @name name
         *
         * @brief Accessor and modifier functions for the %name
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::bio::xml::model::SubstanceName name_type;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const name_type&
        name () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        name_type&
        name ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        name (const name_type& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        name (::std::auto_ptr< name_type > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Construct an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        BoundSubstance (const name_type&);

        /**
         * @brief Construct an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        BoundSubstance (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::type* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the _clone function instead.
         */
        BoundSubstance (const BoundSubstance& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::type* c = 0);

        /**
         * @brief Copy the object polymorphically.
         *
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of an instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual BoundSubstance*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0) const;

        //@}

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        private:
        ::xsd::cxx::tree::one< name_type > name_;
      };

      /**
       * @brief Class corresponding to the %Transducer schema type.
       *
       * @nosubgrouping
       */
      class Transducer: public ::xml_schema::type
      {
        public:
        /**
         * @name name
         *
         * @brief Accessor and modifier functions for the %name
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::bio::xml::model::TransducerName name_type;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const name_type&
        name () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        name_type&
        name ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        name (const name_type& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        name (::std::auto_ptr< name_type > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Construct an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        Transducer (const name_type&);

        /**
         * @brief Construct an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        Transducer (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::type* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the _clone function instead.
         */
        Transducer (const Transducer& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::type* c = 0);

        /**
         * @brief Copy the object polymorphically.
         *
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of an instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual Transducer*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0) const;

        //@}

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        private:
        ::xsd::cxx::tree::one< name_type > name_;
      };

      /**
       * @brief Class corresponding to the %Symbol schema type.
       *
       * @nosubgrouping
       */
      class Symbol: public ::xml_schema::type
      {
        public:
        /**
         * @name name
         *
         * @brief Accessor and modifier functions for the %name
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::bio::xml::model::SymbolName name_type;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const name_type&
        name () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        name_type&
        name ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        name (const name_type& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        name (::std::auto_ptr< name_type > p);

        //@}

        /**
         * @name value
         *
         * @brief Accessor and modifier functions for the %value
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::xml_schema::double_ value_type;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const value_type&
        value () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        value_type&
        value ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        value (const value_type& x);

        //@}

        /**
         * @name dimension
         *
         * @brief Accessor and modifier functions for the %dimension
         * optional attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::xml_schema::string dimension_type;

        /**
         * @brief Attribute optional container type.
         */
        typedef ::xsd::cxx::tree::optional< dimension_type > dimension_optional;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< dimension_type, char > dimension_traits;

        /**
         * @brief Return a read-only (constant) reference to the attribute
         * container.
         *
         * @return A constant reference to the optional container.
         */
        const dimension_optional&
        dimension () const;

        /**
         * @brief Return a read-write reference to the attribute container.
         *
         * @return A reference to the optional container.
         */
        dimension_optional&
        dimension ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        dimension (const dimension_type& x);

        /**
         * @brief Set the attribute value.
         *
         * @param x An optional container with the new value to set.
         *
         * If the value is present in @a x then this function makes a copy 
         * of this value and sets it as the new value of the attribute.
         * Otherwise the attribute container is set the 'not present' state.
         */
        void
        dimension (const dimension_optional& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        dimension (::std::auto_ptr< dimension_type > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Construct an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        Symbol (const name_type&,
                const value_type&);

        /**
         * @brief Construct an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        Symbol (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the _clone function instead.
         */
        Symbol (const Symbol& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0);

        /**
         * @brief Copy the object polymorphically.
         *
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of an instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual Symbol*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0) const;

        //@}

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        private:
        ::xsd::cxx::tree::one< name_type > name_;
        ::xsd::cxx::tree::one< value_type > value_;
        dimension_optional dimension_;
      };

      /**
       * @brief Class corresponding to the %Solver schema type.
       *
       * @nosubgrouping
       */
      class Solver: public ::xml_schema::type
      {
        public:
        /**
         * @name output
         *
         * @brief Accessor and modifier functions for the %output
         * sequence element.
         */
        //@{

        /**
         * @brief Element type.
         */
        typedef ::bio::xml::model::SolverOutput output_type;

        /**
         * @brief Element sequence container type.
         */
        typedef ::xsd::cxx::tree::sequence< output_type > output_sequence;

        /**
         * @brief Element iterator type.
         */
        typedef output_sequence::iterator output_iterator;

        /**
         * @brief Element constant iterator type.
         */
        typedef output_sequence::const_iterator output_const_iterator;

        /**
         * @brief Element traits type.
         */
        typedef ::xsd::cxx::tree::traits< output_type, char > output_traits;

        /**
         * @brief Return a read-only (constant) reference to the element
         * sequence.
         *
         * @return A constant reference to the sequence container.
         */
        const output_sequence&
        output () const;

        /**
         * @brief Return a read-write reference to the element sequence.
         *
         * @return A reference to the sequence container.
         */
        output_sequence&
        output ();

        /**
         * @brief Copy elements from a given sequence.
         *
         * @param s A sequence to copy elements from.
         *
         * For each element in @a s this function makes a copy and adds it 
         * to the sequence. Note that this operation completely changes the 
         * sequence and all old elements will be lost.
         */
        void
        output (const output_sequence& s);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Construct an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        Solver ();

        /**
         * @brief Construct an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        Solver (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the _clone function instead.
         */
        Solver (const Solver& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0);

        /**
         * @brief Copy the object polymorphically.
         *
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of an instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual Solver*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0) const;

        //@}

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        private:
        output_sequence output_;
      };

      /**
       * @brief Class corresponding to the %SolverOutput schema type.
       *
       * @nosubgrouping
       */
      class SolverOutput: public ::xml_schema::type
      {
        public:
        /**
         * @name name
         *
         * @brief Accessor and modifier functions for the %name
         * required attribute.
         */
        //@{

        /**
         * @brief Attribute type.
         */
        typedef ::xml_schema::string name_type;

        /**
         * @brief Attribute traits type.
         */
        typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

        /**
         * @brief Return a read-only (constant) reference to the attribute.
         *
         * @return A constant reference to the attribute.
         */
        const name_type&
        name () const;

        /**
         * @brief Return a read-write reference to the attribute.
         *
         * @return A reference to the attribute.
         */
        name_type&
        name ();

        /**
         * @brief Set the attribute value.
         *
         * @param x A new value to set.
         *
         * This function makes a copy of its argument and sets it as
         * the new value of the attribute.
         */
        void
        name (const name_type& x);

        /**
         * @brief Set the attribute value without copying.
         *
         * @param p A new value to use.
         *
         * This function will try to use the passed value directly instead
         * of making a copy.
         */
        void
        name (::std::auto_ptr< name_type > p);

        //@}

        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Construct an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        SolverOutput (const name_type&);

        /**
         * @brief Construct an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        SolverOutput (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::type* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the _clone function instead.
         */
        SolverOutput (const SolverOutput& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::type* c = 0);

        /**
         * @brief Copy the object polymorphically.
         *
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of an instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual SolverOutput*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0) const;

        //@}

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        private:
        ::xsd::cxx::tree::one< name_type > name_;
      };

      /**
       * @brief Enumeration class corresponding to the %CoordinateSystem
       * schema type.
       */
      class CoordinateSystem: public ::xml_schema::string
      {
        public:

        /**
         * @brief Underlying enum type.
         */
        enum value
        {
          Cartesian,
          Cylindrical,
          Linear
        };

        /**
         * @brief Construct an instance from the underlying enum value.
         *
         * @param v A enum value.
         */
        CoordinateSystem (value v);

        /**
         * @brief Construct an instance from the base value.
         *
         * @param v A base value.
         */
        CoordinateSystem (const ::xml_schema::string& v);

        /**
         * @brief Construct an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        CoordinateSystem (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::type* c = 0);

        /**
         * @brief Construct an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        CoordinateSystem (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::type* c = 0);

        /**
         * @brief Construct an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A DOM element containing the string fragment.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        CoordinateSystem (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::type* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the _clone function instead.
         */
        CoordinateSystem (const CoordinateSystem& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::type* c = 0);

        /**
         * @brief Copy the object polymorphically.
         *
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of an instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual CoordinateSystem*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0) const;

        /**
         * @brief Assign the underlying enum value.
         *
         * @param v A enum value.
         * @return A refernce to the instance.
         */
        CoordinateSystem&
        operator= (value v);

        /**
         * @brief Implicit conversion operator to the underlying
         * enum value.
         *
         * @return A enum value.
         */
        virtual
        operator value () const
        {
          return _xsd_CoordinateSystem_convert ();
        }

        protected:
        value
        _xsd_CoordinateSystem_convert () const;

        public:
        static const char* const _xsd_CoordinateSystem_literals_[3];
        static const value _xsd_CoordinateSystem_indexes_[3];
      };

      /**
       * @brief Class corresponding to the %SubstanceName schema type.
       *
       * @nosubgrouping
       */
      class SubstanceName: public ::xml_schema::string
      {
        public:
        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Construct an instance from initializers for required 
         * elements and attributes.
         */
        SubstanceName ();

        /**
         * @brief Construct an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        SubstanceName (const ::xml_schema::string&);

        /**
         * @brief Construct an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        SubstanceName (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::type* c = 0);

        /**
         * @brief Construct an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        SubstanceName (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::type* c = 0);

        /**
         * @brief Construct an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A DOM element containing the string fragment.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        SubstanceName (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::type* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the _clone function instead.
         */
        SubstanceName (const SubstanceName& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::type* c = 0);

        /**
         * @brief Copy the object polymorphically.
         *
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of an instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual SubstanceName*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0) const;

        //@}
      };

      /**
       * @brief Class corresponding to the %MediumName schema type.
       *
       * @nosubgrouping
       */
      class MediumName: public ::xml_schema::string
      {
        public:
        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Construct an instance from initializers for required 
         * elements and attributes.
         */
        MediumName ();

        /**
         * @brief Construct an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        MediumName (const ::xml_schema::string&);

        /**
         * @brief Construct an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        MediumName (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::type* c = 0);

        /**
         * @brief Construct an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        MediumName (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::type* c = 0);

        /**
         * @brief Construct an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A DOM element containing the string fragment.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        MediumName (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::type* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the _clone function instead.
         */
        MediumName (const MediumName& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::type* c = 0);

        /**
         * @brief Copy the object polymorphically.
         *
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of an instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual MediumName*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0) const;

        //@}
      };

      /**
       * @brief Class corresponding to the %AxisName schema type.
       *
       * @nosubgrouping
       */
      class AxisName: public ::xml_schema::string
      {
        public:
        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Construct an instance from initializers for required 
         * elements and attributes.
         */
        AxisName ();

        /**
         * @brief Construct an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        AxisName (const ::xml_schema::string&);

        /**
         * @brief Construct an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        AxisName (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::type* c = 0);

        /**
         * @brief Construct an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        AxisName (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::type* c = 0);

        /**
         * @brief Construct an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A DOM element containing the string fragment.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        AxisName (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::type* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the _clone function instead.
         */
        AxisName (const AxisName& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::type* c = 0);

        /**
         * @brief Copy the object polymorphically.
         *
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of an instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual AxisName*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0) const;

        //@}
      };

      /**
       * @brief Class corresponding to the %BoundName schema type.
       *
       * @nosubgrouping
       */
      class BoundName: public ::xml_schema::string
      {
        public:
        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Construct an instance from initializers for required 
         * elements and attributes.
         */
        BoundName ();

        /**
         * @brief Construct an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        BoundName (const ::xml_schema::string&);

        /**
         * @brief Construct an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        BoundName (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::type* c = 0);

        /**
         * @brief Construct an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        BoundName (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::type* c = 0);

        /**
         * @brief Construct an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A DOM element containing the string fragment.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        BoundName (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::type* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the _clone function instead.
         */
        BoundName (const BoundName& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::type* c = 0);

        /**
         * @brief Copy the object polymorphically.
         *
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of an instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual BoundName*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0) const;

        //@}
      };

      /**
       * @brief Class corresponding to the %TransducerName schema type.
       *
       * @nosubgrouping
       */
      class TransducerName: public ::xml_schema::string
      {
        public:
        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Construct an instance from initializers for required 
         * elements and attributes.
         */
        TransducerName ();

        /**
         * @brief Construct an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        TransducerName (const ::xml_schema::string&);

        /**
         * @brief Construct an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        TransducerName (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::type* c = 0);

        /**
         * @brief Construct an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        TransducerName (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::type* c = 0);

        /**
         * @brief Construct an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A DOM element containing the string fragment.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        TransducerName (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::type* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the _clone function instead.
         */
        TransducerName (const TransducerName& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::type* c = 0);

        /**
         * @brief Copy the object polymorphically.
         *
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of an instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual TransducerName*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0) const;

        //@}
      };

      /**
       * @brief Class corresponding to the %SymbolName schema type.
       *
       * @nosubgrouping
       */
      class SymbolName: public ::xml_schema::string
      {
        public:
        /**
         * @name Constructors
         */
        //@{

        /**
         * @brief Construct an instance from initializers for required 
         * elements and attributes.
         */
        SymbolName ();

        /**
         * @brief Construct an instance from the ultimate base and
         * initializers for required elements and attributes.
         */
        SymbolName (const ::xml_schema::string&);

        /**
         * @brief Construct an instance from a DOM element.
         *
         * @param e A DOM element to extract the data from.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        SymbolName (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::type* c = 0);

        /**
         * @brief Construct an instance from a DOM attribute.
         *
         * @param a A DOM attribute to extract the data from.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        SymbolName (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::type* c = 0);

        /**
         * @brief Construct an instance from a string fragment.
         *
         * @param s A string fragment to extract the data from.
         * @param e A DOM element containing the string fragment.
         * @param f Flags to construct the new instance with.
         * @param c A pointer to the object that will contain the new
         * instance.
         */
        SymbolName (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::type* c = 0);

        /**
         * @brief Copy constructor.
         *
         * @param x An instance to make a copy of.
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         *
         * For polymorphic object models use the _clone function instead.
         */
        SymbolName (const SymbolName& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::type* c = 0);

        /**
         * @brief Copy the object polymorphically.
         *
         * @param f Flags to construct the copy with.
         * @param c A pointer to the object that will contain the copy.
         * @return A pointer to the dynamically allocated copy.
         *
         * This function ensures that the dynamic type of an instance is
         * used for copying and should be used for polymorphic object
         * models instead of the copy constructor.
         */
        virtual SymbolName*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0) const;

        //@}
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMInputSource.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace bio
{
  namespace xml
  {
    namespace model
    {
      /**
       * @name Parsing functions for the %model document root.
       */
      //@{

      /**
       * @brief Parse a URI or a local file.
       *
       * @param uri A URI or a local file name.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::auto_ptr< ::bio::xml::model::Model >
      model (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      /**
       * @brief Parse a URI or a local file with an error handler.
       *
       * @param uri A URI or a local file name.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::bio::xml::model::Model >
      model (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      /**
       * @brief Parse a URI or a local file with a Xerces-C++ DOM error
       * handler.
       *
       * @param uri A URI or a local file name.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::bio::xml::model::Model >
      model (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      /**
       * @brief Parse a standard input stream.
       *
       * @param is A standrad input stream.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::auto_ptr< ::bio::xml::model::Model >
      model (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      /**
       * @brief Parse a standard input stream with an error handler.
       *
       * @param is A standrad input stream.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::bio::xml::model::Model >
      model (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      /**
       * @brief Parse a standard input stream with a Xerces-C++ DOM error
       * handler.
       *
       * @param is A standrad input stream.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::bio::xml::model::Model >
      model (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      /**
       * @brief Parse a standard input stream with a resource id.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::auto_ptr< ::bio::xml::model::Model >
      model (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      /**
       * @brief Parse a standard input stream with a resource id and an
       * error handler.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::bio::xml::model::Model >
      model (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      /**
       * @brief Parse a standard input stream with a resource id and a
       * Xerces-C++ DOM error handler.
       *
       * @param is A standrad input stream.
       * @param id A resource id.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * The resource id is used to identify the document being parsed in
       * diagnostics as well as to resolve relative paths.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::bio::xml::model::Model >
      model (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      /**
       * @brief Parse a Xerces-C++ DOM input source.
       *
       * @param is A Xerces-C++ DOM input source.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function uses exceptions to report parsing errors.
       */
      ::std::auto_ptr< ::bio::xml::model::Model >
      model (const ::xercesc::DOMInputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      /**
       * @brief Parse a Xerces-C++ DOM input source with an error handler.
       *
       * @param is A Xerces-C++ DOM input source.
       * @param eh An error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::bio::xml::model::Model >
      model (const ::xercesc::DOMInputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      /**
       * @brief Parse a Xerces-C++ DOM input source with a Xerces-C++ DOM
       * error handler.
       *
       * @param is A Xerces-C++ DOM input source.
       * @param eh A Xerces-C++ DOM error handler.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function reports parsing errors by calling the error handler.
       */
      ::std::auto_ptr< ::bio::xml::model::Model >
      model (const ::xercesc::DOMInputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      /**
       * @brief Parse a Xerces-C++ DOM document.
       *
       * @param d A Xerces-C++ DOM document.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       */
      ::std::auto_ptr< ::bio::xml::model::Model >
      model (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      /**
       * @brief Parse a Xerces-C++ DOM document.
       *
       * @param d A pointer to the Xerces-C++ DOM document.
       * @param f Parsing flags.
       * @param p Parsing properties. 
       * @return A pointer to the root of the object model.
       *
       * This function is normally used together with the keep_dom and
       * own_dom parsing flags to assign ownership of the DOM document
       * to the object model.
       */
      ::std::auto_ptr< ::bio::xml::model::Model >
      model (::xercesc::DOMDocument* d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

      //@}
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace bio
{
  namespace xml
  {
    namespace model
    {
      /**
       * @name Serialization functions for the %model document root.
       */
      //@{

      /**
       * @brief Serialize to a standard output stream.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function uses exceptions to report serialization errors.
       */
      void
      model (::std::ostream& os,
             const ::bio::xml::model::Model& x, 
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

      /**
       * @brief Serialize to a standard output stream with an error handler.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param eh An error handler.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      model (::std::ostream& os,
             const ::bio::xml::model::Model& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

      /**
       * @brief Serialize to a standard output stream with a Xerces-C++ DOM
       * error handler.
       *
       * @param os A standrad output stream.
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param eh A Xerces-C++ DOM error handler.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      model (::std::ostream& os,
             const ::bio::xml::model::Model& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function uses exceptions to report serialization errors.
       */
      void
      model (::xercesc::XMLFormatTarget& ft,
             const ::bio::xml::model::Model& x, 
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target with an error
       * handler.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param eh An error handler.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      model (::xercesc::XMLFormatTarget& ft,
             const ::bio::xml::model::Model& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

      /**
       * @brief Serialize to a Xerces-C++ XML format target with a
       * Xerces-C++ DOM error handler.
       *
       * @param ft A Xerces-C++ XML format target.
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param eh A Xerces-C++ DOM error handler.
       * @param e A character encoding to produce XML in.
       * @param f Serialization flags.
       *
       * This function reports serialization errors by calling the error
       * handler.
       */
      void
      model (::xercesc::XMLFormatTarget& ft,
             const ::bio::xml::model::Model& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

      /**
       * @brief Serialize to an existing Xerces-C++ DOM document.
       *
       * @param d A Xerces-C++ DOM document.
       * @param x An object model to serialize.
       * @param f Serialization flags.
       *
       * Note that it is your responsibility to create the DOM document
       * with the correct root element as well as set the necessary
       * namespace mapping attributes.
       */
      void
      model (::xercesc::DOMDocument& d,
             const ::bio::xml::model::Model& x,
             ::xml_schema::flags f = 0);

      /**
       * @brief Serialize to a new Xerces-C++ DOM document.
       *
       * @param x An object model to serialize.
       * @param m A namespace information map.
       * @param f Serialization flags.
       * @return A pointer to the new Xerces-C++ DOM document.
       */
      ::xsd::cxx::xml::dom::auto_ptr< ::xercesc::DOMDocument >
      model (const ::bio::xml::model::Model& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f = 0);

      //@}

      void
      operator<< (::xercesc::DOMElement&, const Model&);

      void
      operator<< (::xercesc::DOMElement&, const Axis&);

      void
      operator<< (::xercesc::DOMElement&, const AxisPoint&);

      void
      operator<< (::xercesc::DOMElement&, const Substance&);

      void
      operator<< (::xercesc::DOMElement&, const Medium&);

      void
      operator<< (::xercesc::DOMElement&, const MediumSubstance&);

      void
      operator<< (::xercesc::DOMElement&, const MediumReaction&);

      void
      operator<< (::xercesc::DOMAttr&, const MediumReaction&);

      void
      operator<< (::xsd::cxx::tree::list_stream< char >&,
                  const MediumReaction&);

      void
      operator<< (::xercesc::DOMElement&, const MediumArea&);

      void
      operator<< (::xercesc::DOMElement&, const Bound&);

      void
      operator<< (::xercesc::DOMElement&, const BoundSubstance&);

      void
      operator<< (::xercesc::DOMElement&, const Transducer&);

      void
      operator<< (::xercesc::DOMElement&, const Symbol&);

      void
      operator<< (::xercesc::DOMElement&, const Solver&);

      void
      operator<< (::xercesc::DOMElement&, const SolverOutput&);

      void
      operator<< (::xercesc::DOMElement&, const CoordinateSystem&);

      void
      operator<< (::xercesc::DOMAttr&, const CoordinateSystem&);

      void
      operator<< (::xsd::cxx::tree::list_stream< char >&,
                  const CoordinateSystem&);

      void
      operator<< (::xercesc::DOMElement&, const SubstanceName&);

      void
      operator<< (::xercesc::DOMAttr&, const SubstanceName&);

      void
      operator<< (::xsd::cxx::tree::list_stream< char >&,
                  const SubstanceName&);

      void
      operator<< (::xercesc::DOMElement&, const MediumName&);

      void
      operator<< (::xercesc::DOMAttr&, const MediumName&);

      void
      operator<< (::xsd::cxx::tree::list_stream< char >&,
                  const MediumName&);

      void
      operator<< (::xercesc::DOMElement&, const AxisName&);

      void
      operator<< (::xercesc::DOMAttr&, const AxisName&);

      void
      operator<< (::xsd::cxx::tree::list_stream< char >&,
                  const AxisName&);

      void
      operator<< (::xercesc::DOMElement&, const BoundName&);

      void
      operator<< (::xercesc::DOMAttr&, const BoundName&);

      void
      operator<< (::xsd::cxx::tree::list_stream< char >&,
                  const BoundName&);

      void
      operator<< (::xercesc::DOMElement&, const TransducerName&);

      void
      operator<< (::xercesc::DOMAttr&, const TransducerName&);

      void
      operator<< (::xsd::cxx::tree::list_stream< char >&,
                  const TransducerName&);

      void
      operator<< (::xercesc::DOMElement&, const SymbolName&);

      void
      operator<< (::xercesc::DOMAttr&, const SymbolName&);

      void
      operator<< (::xsd::cxx::tree::list_stream< char >&,
                  const SymbolName&);
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // MODEL_HXX
