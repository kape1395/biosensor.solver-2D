// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "ModelTransducer.hxx"

namespace bio
{
  namespace xml
  {
    namespace model
    {
      namespace transducer
      {
        // AmperometricElectrode
        // 

        const AmperometricElectrode::bound_type& AmperometricElectrode::
        bound () const
        {
          return this->bound_.get ();
        }

        AmperometricElectrode::bound_type& AmperometricElectrode::
        bound ()
        {
          return this->bound_.get ();
        }

        void AmperometricElectrode::
        bound (const bound_type& bound)
        {
          this->bound_.set (bound);
        }

        void AmperometricElectrode::
        bound (::std::auto_ptr< bound_type > bound)
        {
          this->bound_.set (bound);
        }

        const AmperometricElectrode::substance_type& AmperometricElectrode::
        substance () const
        {
          return this->substance_.get ();
        }

        AmperometricElectrode::substance_type& AmperometricElectrode::
        substance ()
        {
          return this->substance_.get ();
        }

        void AmperometricElectrode::
        substance (const substance_type& substance)
        {
          this->substance_.set (substance);
        }

        void AmperometricElectrode::
        substance (::std::auto_ptr< substance_type > substance)
        {
          this->substance_.set (substance);
        }


        // InjectedElectrode
        // 

        const InjectedElectrode::medium_type& InjectedElectrode::
        medium () const
        {
          return this->medium_.get ();
        }

        InjectedElectrode::medium_type& InjectedElectrode::
        medium ()
        {
          return this->medium_.get ();
        }

        void InjectedElectrode::
        medium (const medium_type& medium)
        {
          this->medium_.set (medium);
        }

        void InjectedElectrode::
        medium (::std::auto_ptr< medium_type > medium)
        {
          this->medium_.set (medium);
        }

        const InjectedElectrode::substance_type& InjectedElectrode::
        substance () const
        {
          return this->substance_.get ();
        }

        InjectedElectrode::substance_type& InjectedElectrode::
        substance ()
        {
          return this->substance_.get ();
        }

        void InjectedElectrode::
        substance (const substance_type& substance)
        {
          this->substance_.set (substance);
        }

        void InjectedElectrode::
        substance (::std::auto_ptr< substance_type > substance)
        {
          this->substance_.set (substance);
        }

        const InjectedElectrode::reactionSpeed_type& InjectedElectrode::
        reactionSpeed () const
        {
          return this->reactionSpeed_.get ();
        }

        InjectedElectrode::reactionSpeed_type& InjectedElectrode::
        reactionSpeed ()
        {
          return this->reactionSpeed_.get ();
        }

        void InjectedElectrode::
        reactionSpeed (const reactionSpeed_type& reactionSpeed)
        {
          this->reactionSpeed_.set (reactionSpeed);
        }

        void InjectedElectrode::
        reactionSpeed (::std::auto_ptr< reactionSpeed_type > reactionSpeed)
        {
          this->reactionSpeed_.set (reactionSpeed);
        }
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace bio
{
  namespace xml
  {
    namespace model
    {
      namespace transducer
      {
        // AmperometricElectrode
        //

        AmperometricElectrode::
        AmperometricElectrode (const name_type& name,
                               const bound_type& bound,
                               const substance_type& substance)
        : ::bio::xml::model::Transducer (name),
          bound_ (bound, ::xml_schema::flags (), this),
          substance_ (substance, ::xml_schema::flags (), this)
        {
        }

        AmperometricElectrode::
        AmperometricElectrode (const AmperometricElectrode& x,
                               ::xml_schema::flags f,
                               ::xml_schema::type* c)
        : ::bio::xml::model::Transducer (x, f, c),
          bound_ (x.bound_, f, this),
          substance_ (x.substance_, f, this)
        {
        }

        AmperometricElectrode::
        AmperometricElectrode (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::type* c)
        : ::bio::xml::model::Transducer (e, f | ::xml_schema::flags::base, c),
          bound_ (f, this),
          substance_ (f, this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e);
            this->parse (p, f);
          }
        }

        void AmperometricElectrode::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::bio::xml::model::Transducer::parse (p, f);

          p.reset_attributes ();

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "bound" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< bound_type > r (
                bound_traits::create (i, f, this));

              this->bound (r);
              continue;
            }

            if (n.name () == "substance" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< substance_type > r (
                substance_traits::create (i, f, this));

              this->substance (r);
              continue;
            }
          }

          if (!bound_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "bound",
              "");
          }

          if (!substance_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "substance",
              "");
          }
        }

        AmperometricElectrode* AmperometricElectrode::
        _clone (::xml_schema::flags f,
                ::xml_schema::type* c) const
        {
          return new AmperometricElectrode (*this, f, c);
        }

        static
        ::xsd::cxx::tree::type_factory_initializer< 0, char, AmperometricElectrode >
        _xsd_AmperometricElectrode_type_factory_init (
          "AmperometricElectrode",
          "http://lt.5grupe.karolis/biosensor/model/transducer");


        // InjectedElectrode
        //

        InjectedElectrode::
        InjectedElectrode (const name_type& name,
                           const medium_type& medium,
                           const substance_type& substance,
                           const reactionSpeed_type& reactionSpeed)
        : ::bio::xml::model::Transducer (name),
          medium_ (medium, ::xml_schema::flags (), this),
          substance_ (substance, ::xml_schema::flags (), this),
          reactionSpeed_ (reactionSpeed, ::xml_schema::flags (), this)
        {
        }

        InjectedElectrode::
        InjectedElectrode (const InjectedElectrode& x,
                           ::xml_schema::flags f,
                           ::xml_schema::type* c)
        : ::bio::xml::model::Transducer (x, f, c),
          medium_ (x.medium_, f, this),
          substance_ (x.substance_, f, this),
          reactionSpeed_ (x.reactionSpeed_, f, this)
        {
        }

        InjectedElectrode::
        InjectedElectrode (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::type* c)
        : ::bio::xml::model::Transducer (e, f | ::xml_schema::flags::base, c),
          medium_ (f, this),
          substance_ (f, this),
          reactionSpeed_ (f, this)
        {
          if ((f & ::xml_schema::flags::base) == 0)
          {
            ::xsd::cxx::xml::dom::parser< char > p (e);
            this->parse (p, f);
          }
        }

        void InjectedElectrode::
        parse (::xsd::cxx::xml::dom::parser< char >& p,
               ::xml_schema::flags f)
        {
          this->::bio::xml::model::Transducer::parse (p, f);

          p.reset_attributes ();

          while (p.more_attributes ())
          {
            const ::xercesc::DOMAttr& i (p.next_attribute ());
            const ::xsd::cxx::xml::qualified_name< char > n (
              ::xsd::cxx::xml::dom::name< char > (i));

            if (n.name () == "medium" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< medium_type > r (
                medium_traits::create (i, f, this));

              this->medium (r);
              continue;
            }

            if (n.name () == "substance" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< substance_type > r (
                substance_traits::create (i, f, this));

              this->substance (r);
              continue;
            }

            if (n.name () == "reactionSpeed" && n.namespace_ ().empty ())
            {
              ::std::auto_ptr< reactionSpeed_type > r (
                reactionSpeed_traits::create (i, f, this));

              this->reactionSpeed (r);
              continue;
            }
          }

          if (!medium_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "medium",
              "");
          }

          if (!substance_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "substance",
              "");
          }

          if (!reactionSpeed_.present ())
          {
            throw ::xsd::cxx::tree::expected_attribute< char > (
              "reactionSpeed",
              "");
          }
        }

        InjectedElectrode* InjectedElectrode::
        _clone (::xml_schema::flags f,
                ::xml_schema::type* c) const
        {
          return new InjectedElectrode (*this, f, c);
        }

        static
        ::xsd::cxx::tree::type_factory_initializer< 0, char, InjectedElectrode >
        _xsd_InjectedElectrode_type_factory_init (
          "InjectedElectrode",
          "http://lt.5grupe.karolis/biosensor/model/transducer");
      }
    }
  }
}

#include <istream>
#include <xercesc/framework/Wrapper4InputSource.hpp>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace bio
{
  namespace xml
  {
    namespace model
    {
      namespace transducer
      {
      }
    }
  }
}

#include <ostream>
#include <xsd/cxx/xml/dom/serialization-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace bio
{
  namespace xml
  {
    namespace model
    {
      namespace transducer
      {
        void
        operator<< (::xercesc::DOMElement& e, const AmperometricElectrode& i)
        {
          e << static_cast< const ::bio::xml::model::Transducer& > (i);

          // bound
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "bound",
                e));

            a << i.bound ();
          }

          // substance
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "substance",
                e));

            a << i.substance ();
          }
        }

        static
        ::xsd::cxx::tree::type_serializer_initializer< 0, char, AmperometricElectrode >
        _xsd_AmperometricElectrode_type_serializer_init (
          "AmperometricElectrode",
          "http://lt.5grupe.karolis/biosensor/model/transducer");


        void
        operator<< (::xercesc::DOMElement& e, const InjectedElectrode& i)
        {
          e << static_cast< const ::bio::xml::model::Transducer& > (i);

          // medium
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "medium",
                e));

            a << i.medium ();
          }

          // substance
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "substance",
                e));

            a << i.substance ();
          }

          // reactionSpeed
          //
          {
            ::xercesc::DOMAttr& a (
              ::xsd::cxx::xml::dom::create_attribute (
                "reactionSpeed",
                e));

            a << i.reactionSpeed ();
          }
        }

        static
        ::xsd::cxx::tree::type_serializer_initializer< 0, char, InjectedElectrode >
        _xsd_InjectedElectrode_type_serializer_init (
          "InjectedElectrode",
          "http://lt.5grupe.karolis/biosensor/model/transducer");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

