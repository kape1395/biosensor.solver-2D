// Copyright (C) 2005-2007 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from ModelSolver.xsd.
 */

#ifndef MODEL_SOLVER_HXX
#define MODEL_SOLVER_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/version.hxx>

#if (XSD_INT_VERSION != 3000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/tree/parsing.hxx>

#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/xml/dom/serialization-header.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type<type> simple_type;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef integer non_positive_integer;
  typedef integer non_negative_integer;
  typedef integer positive_integer;
  typedef integer negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken> nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< type, char, ncname > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::day< char, simple_type > day;
  typedef ::xsd::cxx::tree::month< char, simple_type > month;
  typedef ::xsd::cxx::tree::month_day< char, simple_type > month_day;
  typedef ::xsd::cxx::tree::year< char, simple_type > year;
  typedef ::xsd::cxx::tree::year_month< char, simple_type > year_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information. Used in serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info < char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap < char > namespace_infomap;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // DOM user data key for back pointers to tree nodes.
  //
#ifndef XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA

  const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;

#endif

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::serialization< char > serialization;
  typedef ::xsd::cxx::tree::no_namespace_mapping< char > no_namespace_mapping;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::xsi_already_in_use< char > xsi_already_in_use;
  typedef ::xsd::cxx::tree::bounds< char > bounds;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Error handler interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;
}

// Forward declarations.
//
namespace bio
{
  namespace xml
  {
    namespace model
    {
      namespace solver
      {
        class FiniteDifferences;
        class Explicit1D;
        class Implicit1D;
        class Explicit2D;
        class Implicit2D;
        class Axis;
        class ConstantAxisPart;
        class BilinearAxisPart;
        class ConcentrationProfile;
        class CurrentDensity;
        class AveragedConcentration;
        class SteadyStateHalfTime;
        class SteadyState;
        class Kinetic;
        class StopCondition;
        class StopConditionValidAfter;
        class FailIfAbove;
        class FailIfInvalidConcentrations;
        class FailISumOfConcentrationsNonConst;
        class CurrentDensityGradient;
        class TimeStepAdjuster;
        class SimpleTimeStepAdjuster;
      }
    }
  }
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "Model.hxx"

namespace bio
{
  namespace xml
  {
    namespace model
    {
      /**
       * @brief C++ namespace for the %http://lt.5grupe.karolis/biosensor/model/solver
       * schema namespace.
       */
      namespace solver
      {
        /**
         * @brief Class corresponding to the %FiniteDifferences schema type.
         *
         * @nosubgrouping
         */
        class FiniteDifferences: public ::bio::xml::model::Solver
        {
          public:
          /**
           * @name axis
           *
           * @brief Accessor and modifier functions for the %axis
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::bio::xml::model::solver::Axis axis_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< axis_type > axis_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef axis_sequence::iterator axis_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef axis_sequence::const_iterator axis_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< axis_type, char > axis_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const axis_sequence&
          axis () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          axis_sequence&
          axis ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          axis (const axis_sequence& s);

          //@}

          /**
           * @name stopCondition
           *
           * @brief Accessor and modifier functions for the %stopCondition
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::bio::xml::model::solver::StopCondition stopCondition_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< stopCondition_type > stopCondition_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef stopCondition_sequence::iterator stopCondition_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef stopCondition_sequence::const_iterator stopCondition_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< stopCondition_type, char > stopCondition_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const stopCondition_sequence&
          stopCondition () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          stopCondition_sequence&
          stopCondition ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          stopCondition (const stopCondition_sequence& s);

          //@}

          /**
           * @name timeStepAdjuster
           *
           * @brief Accessor and modifier functions for the %timeStepAdjuster
           * optional element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::bio::xml::model::solver::TimeStepAdjuster timeStepAdjuster_type;

          /**
           * @brief Element optional container type.
           */
          typedef ::xsd::cxx::tree::optional< timeStepAdjuster_type > timeStepAdjuster_optional;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< timeStepAdjuster_type, char > timeStepAdjuster_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const timeStepAdjuster_optional&
          timeStepAdjuster () const;

          /**
           * @brief Return a read-write reference to the element container.
           *
           * @return A reference to the optional container.
           */
          timeStepAdjuster_optional&
          timeStepAdjuster ();

          /**
           * @brief Set the element value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the element.
           */
          void
          timeStepAdjuster (const timeStepAdjuster_type& x);

          /**
           * @brief Set the element value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the element.
           * Otherwise the element container is set the 'not present' state.
           */
          void
          timeStepAdjuster (const timeStepAdjuster_optional& x);

          /**
           * @brief Set the element value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          timeStepAdjuster (::std::auto_ptr< timeStepAdjuster_type > p);

          //@}

          /**
           * @name timeStep
           *
           * @brief Accessor and modifier functions for the %timeStep
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::double_ timeStep_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< timeStep_type, char > timeStep_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const timeStep_type&
          timeStep () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          timeStep_type&
          timeStep ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          timeStep (const timeStep_type& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Construct an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          FiniteDifferences (const timeStep_type&);

          /**
           * @brief Construct an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to construct the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          FiniteDifferences (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::type* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the _clone function instead.
           */
          FiniteDifferences (const FiniteDifferences& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::type* c = 0);

          /**
           * @brief Copy the object polymorphically.
           *
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of an instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual FiniteDifferences*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::type* c = 0) const;

          //@}

          // Implementation.
          //
          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          private:
          axis_sequence axis_;
          stopCondition_sequence stopCondition_;
          timeStepAdjuster_optional timeStepAdjuster_;
          ::xsd::cxx::tree::one< timeStep_type > timeStep_;
        };

        /**
         * @brief Class corresponding to the %Explicit1D schema type.
         *
         * @nosubgrouping
         */
        class Explicit1D: public ::bio::xml::model::solver::FiniteDifferences
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Construct an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Explicit1D (const timeStep_type&);

          /**
           * @brief Construct an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to construct the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Explicit1D (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::type* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the _clone function instead.
           */
          Explicit1D (const Explicit1D& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::type* c = 0);

          /**
           * @brief Copy the object polymorphically.
           *
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of an instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Explicit1D*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::type* c = 0) const;

          //@}
        };

        /**
         * @brief Class corresponding to the %Implicit1D schema type.
         *
         * @nosubgrouping
         */
        class Implicit1D: public ::bio::xml::model::solver::FiniteDifferences
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Construct an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Implicit1D (const timeStep_type&);

          /**
           * @brief Construct an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to construct the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Implicit1D (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::type* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the _clone function instead.
           */
          Implicit1D (const Implicit1D& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::type* c = 0);

          /**
           * @brief Copy the object polymorphically.
           *
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of an instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Implicit1D*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::type* c = 0) const;

          //@}
        };

        /**
         * @brief Class corresponding to the %Explicit2D schema type.
         *
         * @nosubgrouping
         */
        class Explicit2D: public ::bio::xml::model::solver::FiniteDifferences
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Construct an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Explicit2D (const timeStep_type&);

          /**
           * @brief Construct an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to construct the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Explicit2D (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::type* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the _clone function instead.
           */
          Explicit2D (const Explicit2D& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::type* c = 0);

          /**
           * @brief Copy the object polymorphically.
           *
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of an instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Explicit2D*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::type* c = 0) const;

          //@}
        };

        /**
         * @brief Class corresponding to the %Implicit2D schema type.
         *
         * @nosubgrouping
         */
        class Implicit2D: public ::bio::xml::model::solver::FiniteDifferences
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Construct an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Implicit2D (const timeStep_type&);

          /**
           * @brief Construct an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to construct the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Implicit2D (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::type* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the _clone function instead.
           */
          Implicit2D (const Implicit2D& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::type* c = 0);

          /**
           * @brief Copy the object polymorphically.
           *
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of an instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Implicit2D*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::type* c = 0) const;

          //@}
        };

        /**
         * @brief Class corresponding to the %Axis schema type.
         *
         * @nosubgrouping
         */
        class Axis: public ::xml_schema::type
        {
          public:
          /**
           * @name from
           *
           * @brief Accessor and modifier functions for the %from
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::bio::xml::model::SymbolName from_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< from_type, char > from_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const from_type&
          from () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          from_type&
          from ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          from (const from_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          from (::std::auto_ptr< from_type > p);

          //@}

          /**
           * @name to
           *
           * @brief Accessor and modifier functions for the %to
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::bio::xml::model::SymbolName to_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< to_type, char > to_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const to_type&
          to () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          to_type&
          to ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          to (const to_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          to (::std::auto_ptr< to_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Construct an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Axis (const from_type&,
                const to_type&);

          /**
           * @brief Construct an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to construct the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Axis (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the _clone function instead.
           */
          Axis (const Axis& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::type* c = 0);

          /**
           * @brief Copy the object polymorphically.
           *
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of an instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Axis*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::type* c = 0) const;

          //@}

          // Implementation.
          //
          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          private:
          ::xsd::cxx::tree::one< from_type > from_;
          ::xsd::cxx::tree::one< to_type > to_;
        };

        /**
         * @brief Class corresponding to the %ConstantAxisPart schema type.
         *
         * @nosubgrouping
         */
        class ConstantAxisPart: public ::bio::xml::model::solver::Axis
        {
          public:
          /**
           * @name stepCount
           *
           * @brief Accessor and modifier functions for the %stepCount
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::integer stepCount_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< stepCount_type, char > stepCount_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const stepCount_type&
          stepCount () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          stepCount_type&
          stepCount ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          stepCount (const stepCount_type& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Construct an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          ConstantAxisPart (const from_type&,
                            const to_type&,
                            const stepCount_type&);

          /**
           * @brief Construct an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to construct the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          ConstantAxisPart (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::type* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the _clone function instead.
           */
          ConstantAxisPart (const ConstantAxisPart& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::type* c = 0);

          /**
           * @brief Copy the object polymorphically.
           *
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of an instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual ConstantAxisPart*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::type* c = 0) const;

          //@}

          // Implementation.
          //
          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          private:
          ::xsd::cxx::tree::one< stepCount_type > stepCount_;
        };

        /**
         * @brief Class corresponding to the %BilinearAxisPart schema type.
         *
         * @nosubgrouping
         */
        class BilinearAxisPart: public ::bio::xml::model::solver::Axis
        {
          public:
          /**
           * @name startStep
           *
           * @brief Accessor and modifier functions for the %startStep
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::double_ startStep_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< startStep_type, char > startStep_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const startStep_type&
          startStep () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          startStep_type&
          startStep ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          startStep (const startStep_type& x);

          //@}

          /**
           * @name factor
           *
           * @brief Accessor and modifier functions for the %factor
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::double_ factor_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< factor_type, char > factor_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const factor_type&
          factor () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          factor_type&
          factor ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          factor (const factor_type& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Construct an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          BilinearAxisPart (const from_type&,
                            const to_type&,
                            const startStep_type&,
                            const factor_type&);

          /**
           * @brief Construct an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to construct the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          BilinearAxisPart (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::type* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the _clone function instead.
           */
          BilinearAxisPart (const BilinearAxisPart& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::type* c = 0);

          /**
           * @brief Copy the object polymorphically.
           *
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of an instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual BilinearAxisPart*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::type* c = 0) const;

          //@}

          // Implementation.
          //
          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          private:
          ::xsd::cxx::tree::one< startStep_type > startStep_;
          ::xsd::cxx::tree::one< factor_type > factor_;
        };

        /**
         * @brief Class corresponding to the %ConcentrationProfile schema type.
         *
         * @nosubgrouping
         */
        class ConcentrationProfile: public ::bio::xml::model::SolverOutput
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Construct an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          ConcentrationProfile (const name_type&);

          /**
           * @brief Construct an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to construct the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          ConcentrationProfile (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::type* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the _clone function instead.
           */
          ConcentrationProfile (const ConcentrationProfile& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::type* c = 0);

          /**
           * @brief Copy the object polymorphically.
           *
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of an instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual ConcentrationProfile*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::type* c = 0) const;

          //@}
        };

        /**
         * @brief Class corresponding to the %CurrentDensity schema type.
         *
         * @nosubgrouping
         */
        class CurrentDensity: public ::bio::xml::model::SolverOutput
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Construct an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          CurrentDensity (const name_type&);

          /**
           * @brief Construct an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to construct the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CurrentDensity (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::type* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the _clone function instead.
           */
          CurrentDensity (const CurrentDensity& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::type* c = 0);

          /**
           * @brief Copy the object polymorphically.
           *
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of an instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual CurrentDensity*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::type* c = 0) const;

          //@}
        };

        /**
         * @brief Class corresponding to the %AveragedConcentration schema type.
         *
         * @nosubgrouping
         */
        class AveragedConcentration: public ::bio::xml::model::SolverOutput
        {
          public:
          /**
           * @name medium
           *
           * @brief Accessor and modifier functions for the %medium
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::bio::xml::model::MediumName medium_type;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< medium_type > medium_optional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< medium_type, char > medium_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const medium_optional&
          medium () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          medium_optional&
          medium ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          medium (const medium_type& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          medium (const medium_optional& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          medium (::std::auto_ptr< medium_type > p);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Construct an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          AveragedConcentration (const name_type&);

          /**
           * @brief Construct an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to construct the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          AveragedConcentration (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::type* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the _clone function instead.
           */
          AveragedConcentration (const AveragedConcentration& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::type* c = 0);

          /**
           * @brief Copy the object polymorphically.
           *
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of an instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual AveragedConcentration*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::type* c = 0) const;

          //@}

          // Implementation.
          //
          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          private:
          medium_optional medium_;
        };

        /**
         * @brief Class corresponding to the %SteadyStateHalfTime schema type.
         *
         * @nosubgrouping
         */
        class SteadyStateHalfTime: public ::bio::xml::model::SolverOutput
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Construct an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          SteadyStateHalfTime (const name_type&);

          /**
           * @brief Construct an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to construct the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SteadyStateHalfTime (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::type* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the _clone function instead.
           */
          SteadyStateHalfTime (const SteadyStateHalfTime& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::type* c = 0);

          /**
           * @brief Copy the object polymorphically.
           *
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of an instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SteadyStateHalfTime*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::type* c = 0) const;

          //@}
        };

        /**
         * @brief Class corresponding to the %SteadyState schema type.
         *
         * @nosubgrouping
         */
        class SteadyState: public ::bio::xml::model::SolverOutput
        {
          public:
          /**
           * @name output
           *
           * @brief Accessor and modifier functions for the %output
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::bio::xml::model::SolverOutput output_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< output_type > output_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef output_sequence::iterator output_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef output_sequence::const_iterator output_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< output_type, char > output_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const output_sequence&
          output () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          output_sequence&
          output ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          output (const output_sequence& s);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Construct an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          SteadyState (const name_type&);

          /**
           * @brief Construct an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to construct the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SteadyState (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::type* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the _clone function instead.
           */
          SteadyState (const SteadyState& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::type* c = 0);

          /**
           * @brief Copy the object polymorphically.
           *
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of an instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SteadyState*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::type* c = 0) const;

          //@}

          // Implementation.
          //
          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          private:
          output_sequence output_;
        };

        /**
         * @brief Class corresponding to the %Kinetic schema type.
         *
         * @nosubgrouping
         */
        class Kinetic: public ::bio::xml::model::SolverOutput
        {
          public:
          /**
           * @name output
           *
           * @brief Accessor and modifier functions for the %output
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::bio::xml::model::SolverOutput output_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< output_type > output_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef output_sequence::iterator output_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef output_sequence::const_iterator output_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< output_type, char > output_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const output_sequence&
          output () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          output_sequence&
          output ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          output (const output_sequence& s);

          //@}

          /**
           * @name stepCount
           *
           * @brief Accessor and modifier functions for the %stepCount
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::int_ stepCount_type;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< stepCount_type > stepCount_optional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< stepCount_type, char > stepCount_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const stepCount_optional&
          stepCount () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          stepCount_optional&
          stepCount ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          stepCount (const stepCount_type& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          stepCount (const stepCount_optional& x);

          //@}

          /**
           * @name time
           *
           * @brief Accessor and modifier functions for the %time
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::double_ time_type;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< time_type > time_optional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< time_type, char > time_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const time_optional&
          time () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          time_optional&
          time ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          time (const time_type& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          time (const time_optional& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Construct an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          Kinetic (const name_type&);

          /**
           * @brief Construct an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to construct the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          Kinetic (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::type* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the _clone function instead.
           */
          Kinetic (const Kinetic& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::type* c = 0);

          /**
           * @brief Copy the object polymorphically.
           *
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of an instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual Kinetic*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::type* c = 0) const;

          //@}

          // Implementation.
          //
          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          private:
          output_sequence output_;
          stepCount_optional stepCount_;
          time_optional time_;
        };

        /**
         * @brief Class corresponding to the %StopCondition schema type.
         *
         * @nosubgrouping
         */
        class StopCondition: public ::xml_schema::type
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Construct an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          StopCondition ();

          /**
           * @brief Construct an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to construct the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          StopCondition (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::type* c = 0);

          /**
           * @brief Construct an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to construct the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          StopCondition (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::type* c = 0);

          /**
           * @brief Construct an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A DOM element containing the string fragment.
           * @param f Flags to construct the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          StopCondition (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::type* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the _clone function instead.
           */
          StopCondition (const StopCondition& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::type* c = 0);

          /**
           * @brief Copy the object polymorphically.
           *
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of an instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual StopCondition*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::type* c = 0) const;

          //@}
        };

        /**
         * @brief Class corresponding to the %StopConditionValidAfter schema type.
         *
         * @nosubgrouping
         */
        class StopConditionValidAfter: public ::bio::xml::model::solver::StopCondition
        {
          public:
          /**
           * @name stopCondition
           *
           * @brief Accessor and modifier functions for the %stopCondition
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::bio::xml::model::solver::StopCondition stopCondition_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< stopCondition_type > stopCondition_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef stopCondition_sequence::iterator stopCondition_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef stopCondition_sequence::const_iterator stopCondition_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< stopCondition_type, char > stopCondition_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const stopCondition_sequence&
          stopCondition () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          stopCondition_sequence&
          stopCondition ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          stopCondition (const stopCondition_sequence& s);

          //@}

          /**
           * @name stepCount
           *
           * @brief Accessor and modifier functions for the %stepCount
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::int_ stepCount_type;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< stepCount_type > stepCount_optional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< stepCount_type, char > stepCount_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const stepCount_optional&
          stepCount () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          stepCount_optional&
          stepCount ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          stepCount (const stepCount_type& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          stepCount (const stepCount_optional& x);

          //@}

          /**
           * @name time
           *
           * @brief Accessor and modifier functions for the %time
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::double_ time_type;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< time_type > time_optional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< time_type, char > time_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const time_optional&
          time () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          time_optional&
          time ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          time (const time_type& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          time (const time_optional& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Construct an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          StopConditionValidAfter ();

          /**
           * @brief Construct an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to construct the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          StopConditionValidAfter (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::type* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the _clone function instead.
           */
          StopConditionValidAfter (const StopConditionValidAfter& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::type* c = 0);

          /**
           * @brief Copy the object polymorphically.
           *
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of an instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual StopConditionValidAfter*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::type* c = 0) const;

          //@}

          // Implementation.
          //
          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          private:
          stopCondition_sequence stopCondition_;
          stepCount_optional stepCount_;
          time_optional time_;
        };

        /**
         * @brief Class corresponding to the %FailIfAbove schema type.
         *
         * @nosubgrouping
         */
        class FailIfAbove: public ::bio::xml::model::solver::StopCondition
        {
          public:
          /**
           * @name stepCount
           *
           * @brief Accessor and modifier functions for the %stepCount
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::int_ stepCount_type;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< stepCount_type > stepCount_optional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< stepCount_type, char > stepCount_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const stepCount_optional&
          stepCount () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          stepCount_optional&
          stepCount ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          stepCount (const stepCount_type& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          stepCount (const stepCount_optional& x);

          //@}

          /**
           * @name time
           *
           * @brief Accessor and modifier functions for the %time
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::double_ time_type;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< time_type > time_optional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< time_type, char > time_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const time_optional&
          time () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          time_optional&
          time ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          time (const time_type& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          time (const time_optional& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Construct an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          FailIfAbove ();

          /**
           * @brief Construct an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to construct the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          FailIfAbove (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::type* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the _clone function instead.
           */
          FailIfAbove (const FailIfAbove& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::type* c = 0);

          /**
           * @brief Copy the object polymorphically.
           *
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of an instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual FailIfAbove*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::type* c = 0) const;

          //@}

          // Implementation.
          //
          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          private:
          stepCount_optional stepCount_;
          time_optional time_;
        };

        /**
         * @brief Class corresponding to the %FailIfInvalidConcentrations schema type.
         *
         * @nosubgrouping
         */
        class FailIfInvalidConcentrations: public ::bio::xml::model::solver::StopCondition
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Construct an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          FailIfInvalidConcentrations ();

          /**
           * @brief Construct an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to construct the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          FailIfInvalidConcentrations (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::type* c = 0);

          /**
           * @brief Construct an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to construct the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          FailIfInvalidConcentrations (const ::xercesc::DOMAttr& a,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::type* c = 0);

          /**
           * @brief Construct an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A DOM element containing the string fragment.
           * @param f Flags to construct the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          FailIfInvalidConcentrations (const ::std::string& s,
                                       const ::xercesc::DOMElement* e,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::type* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the _clone function instead.
           */
          FailIfInvalidConcentrations (const FailIfInvalidConcentrations& x,
                                       ::xml_schema::flags f = 0,
                                       ::xml_schema::type* c = 0);

          /**
           * @brief Copy the object polymorphically.
           *
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of an instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual FailIfInvalidConcentrations*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::type* c = 0) const;

          //@}
        };

        /**
         * @brief Class corresponding to the %FailISumOfConcentrationsNonConst schema type.
         *
         * @nosubgrouping
         */
        class FailISumOfConcentrationsNonConst: public ::bio::xml::model::solver::StopCondition
        {
          public:
          /**
           * @name substance
           *
           * @brief Accessor and modifier functions for the %substance
           * sequence element.
           */
          //@{

          /**
           * @brief Element type.
           */
          typedef ::bio::xml::model::SubstanceName substance_type;

          /**
           * @brief Element sequence container type.
           */
          typedef ::xsd::cxx::tree::sequence< substance_type > substance_sequence;

          /**
           * @brief Element iterator type.
           */
          typedef substance_sequence::iterator substance_iterator;

          /**
           * @brief Element constant iterator type.
           */
          typedef substance_sequence::const_iterator substance_const_iterator;

          /**
           * @brief Element traits type.
           */
          typedef ::xsd::cxx::tree::traits< substance_type, char > substance_traits;

          /**
           * @brief Return a read-only (constant) reference to the element
           * sequence.
           *
           * @return A constant reference to the sequence container.
           */
          const substance_sequence&
          substance () const;

          /**
           * @brief Return a read-write reference to the element sequence.
           *
           * @return A reference to the sequence container.
           */
          substance_sequence&
          substance ();

          /**
           * @brief Copy elements from a given sequence.
           *
           * @param s A sequence to copy elements from.
           *
           * For each element in @a s this function makes a copy and adds it 
           * to the sequence. Note that this operation completely changes the 
           * sequence and all old elements will be lost.
           */
          void
          substance (const substance_sequence& s);

          //@}

          /**
           * @name medium
           *
           * @brief Accessor and modifier functions for the %medium
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::bio::xml::model::MediumName medium_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< medium_type, char > medium_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const medium_type&
          medium () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          medium_type&
          medium ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          medium (const medium_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          medium (::std::auto_ptr< medium_type > p);

          //@}

          /**
           * @name sum
           *
           * @brief Accessor and modifier functions for the %sum
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::bio::xml::model::SymbolName sum_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< sum_type, char > sum_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const sum_type&
          sum () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          sum_type&
          sum ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          sum (const sum_type& x);

          /**
           * @brief Set the attribute value without copying.
           *
           * @param p A new value to use.
           *
           * This function will try to use the passed value directly instead
           * of making a copy.
           */
          void
          sum (::std::auto_ptr< sum_type > p);

          //@}

          /**
           * @name error
           *
           * @brief Accessor and modifier functions for the %error
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::double_ error_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< error_type, char > error_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const error_type&
          error () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          error_type&
          error ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          error (const error_type& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Construct an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          FailISumOfConcentrationsNonConst (const medium_type&,
                                            const sum_type&,
                                            const error_type&);

          /**
           * @brief Construct an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to construct the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          FailISumOfConcentrationsNonConst (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::type* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the _clone function instead.
           */
          FailISumOfConcentrationsNonConst (const FailISumOfConcentrationsNonConst& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::type* c = 0);

          /**
           * @brief Copy the object polymorphically.
           *
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of an instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual FailISumOfConcentrationsNonConst*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::type* c = 0) const;

          //@}

          // Implementation.
          //
          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          private:
          substance_sequence substance_;
          ::xsd::cxx::tree::one< medium_type > medium_;
          ::xsd::cxx::tree::one< sum_type > sum_;
          ::xsd::cxx::tree::one< error_type > error_;
        };

        /**
         * @brief Class corresponding to the %CurrentDensityGradient schema type.
         *
         * @nosubgrouping
         */
        class CurrentDensityGradient: public ::bio::xml::model::solver::StopCondition
        {
          public:
          /**
           * @name lessThan
           *
           * @brief Accessor and modifier functions for the %lessThan
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::double_ lessThan_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< lessThan_type, char > lessThan_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const lessThan_type&
          lessThan () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          lessThan_type&
          lessThan ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          lessThan (const lessThan_type& x);

          //@}

          /**
           * @name normalized
           *
           * @brief Accessor and modifier functions for the %normalized
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::boolean normalized_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< normalized_type, char > normalized_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const normalized_type&
          normalized () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          normalized_type&
          normalized ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          normalized (const normalized_type& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Construct an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          CurrentDensityGradient (const lessThan_type&,
                                  const normalized_type&);

          /**
           * @brief Construct an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to construct the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          CurrentDensityGradient (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::type* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the _clone function instead.
           */
          CurrentDensityGradient (const CurrentDensityGradient& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::type* c = 0);

          /**
           * @brief Copy the object polymorphically.
           *
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of an instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual CurrentDensityGradient*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::type* c = 0) const;

          //@}

          // Implementation.
          //
          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          private:
          ::xsd::cxx::tree::one< lessThan_type > lessThan_;
          ::xsd::cxx::tree::one< normalized_type > normalized_;
        };

        /**
         * @brief Class corresponding to the %TimeStepAdjuster schema type.
         *
         * @nosubgrouping
         */
        class TimeStepAdjuster: public ::xml_schema::type
        {
          public:
          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Construct an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          TimeStepAdjuster ();

          /**
           * @brief Construct an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to construct the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          TimeStepAdjuster (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::type* c = 0);

          /**
           * @brief Construct an instance from a DOM attribute.
           *
           * @param a A DOM attribute to extract the data from.
           * @param f Flags to construct the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          TimeStepAdjuster (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::type* c = 0);

          /**
           * @brief Construct an instance from a string fragment.
           *
           * @param s A string fragment to extract the data from.
           * @param e A DOM element containing the string fragment.
           * @param f Flags to construct the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          TimeStepAdjuster (const ::std::string& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::type* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the _clone function instead.
           */
          TimeStepAdjuster (const TimeStepAdjuster& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::type* c = 0);

          /**
           * @brief Copy the object polymorphically.
           *
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of an instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual TimeStepAdjuster*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::type* c = 0) const;

          //@}
        };

        /**
         * @brief Class corresponding to the %SimpleTimeStepAdjuster schema type.
         *
         * @nosubgrouping
         */
        class SimpleTimeStepAdjuster: public ::bio::xml::model::solver::TimeStepAdjuster
        {
          public:
          /**
           * @name factor
           *
           * @brief Accessor and modifier functions for the %factor
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::double_ factor_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< factor_type, char > factor_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const factor_type&
          factor () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          factor_type&
          factor ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          factor (const factor_type& x);

          //@}

          /**
           * @name everyStepCount
           *
           * @brief Accessor and modifier functions for the %everyStepCount
           * required attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::integer everyStepCount_type;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< everyStepCount_type, char > everyStepCount_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute.
           *
           * @return A constant reference to the attribute.
           */
          const everyStepCount_type&
          everyStepCount () const;

          /**
           * @brief Return a read-write reference to the attribute.
           *
           * @return A reference to the attribute.
           */
          everyStepCount_type&
          everyStepCount ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          everyStepCount (const everyStepCount_type& x);

          //@}

          /**
           * @name maxStepSize
           *
           * @brief Accessor and modifier functions for the %maxStepSize
           * optional attribute.
           */
          //@{

          /**
           * @brief Attribute type.
           */
          typedef ::xml_schema::double_ maxStepSize_type;

          /**
           * @brief Attribute optional container type.
           */
          typedef ::xsd::cxx::tree::optional< maxStepSize_type > maxStepSize_optional;

          /**
           * @brief Attribute traits type.
           */
          typedef ::xsd::cxx::tree::traits< maxStepSize_type, char > maxStepSize_traits;

          /**
           * @brief Return a read-only (constant) reference to the attribute
           * container.
           *
           * @return A constant reference to the optional container.
           */
          const maxStepSize_optional&
          maxStepSize () const;

          /**
           * @brief Return a read-write reference to the attribute container.
           *
           * @return A reference to the optional container.
           */
          maxStepSize_optional&
          maxStepSize ();

          /**
           * @brief Set the attribute value.
           *
           * @param x A new value to set.
           *
           * This function makes a copy of its argument and sets it as
           * the new value of the attribute.
           */
          void
          maxStepSize (const maxStepSize_type& x);

          /**
           * @brief Set the attribute value.
           *
           * @param x An optional container with the new value to set.
           *
           * If the value is present in @a x then this function makes a copy 
           * of this value and sets it as the new value of the attribute.
           * Otherwise the attribute container is set the 'not present' state.
           */
          void
          maxStepSize (const maxStepSize_optional& x);

          //@}

          /**
           * @name Constructors
           */
          //@{

          /**
           * @brief Construct an instance from the ultimate base and
           * initializers for required elements and attributes.
           */
          SimpleTimeStepAdjuster (const factor_type&,
                                  const everyStepCount_type&);

          /**
           * @brief Construct an instance from a DOM element.
           *
           * @param e A DOM element to extract the data from.
           * @param f Flags to construct the new instance with.
           * @param c A pointer to the object that will contain the new
           * instance.
           */
          SimpleTimeStepAdjuster (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::type* c = 0);

          /**
           * @brief Copy constructor.
           *
           * @param x An instance to make a copy of.
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           *
           * For polymorphic object models use the _clone function instead.
           */
          SimpleTimeStepAdjuster (const SimpleTimeStepAdjuster& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::type* c = 0);

          /**
           * @brief Copy the object polymorphically.
           *
           * @param f Flags to construct the copy with.
           * @param c A pointer to the object that will contain the copy.
           * @return A pointer to the dynamically allocated copy.
           *
           * This function ensures that the dynamic type of an instance is
           * used for copying and should be used for polymorphic object
           * models instead of the copy constructor.
           */
          virtual SimpleTimeStepAdjuster*
          _clone (::xml_schema::flags f = 0,
                  ::xml_schema::type* c = 0) const;

          //@}

          // Implementation.
          //
          protected:
          void
          parse (::xsd::cxx::xml::dom::parser< char >&,
                 ::xml_schema::flags);

          private:
          ::xsd::cxx::tree::one< factor_type > factor_;
          ::xsd::cxx::tree::one< everyStepCount_type > everyStepCount_;
          maxStepSize_optional maxStepSize_;
        };
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMInputSource.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace bio
{
  namespace xml
  {
    namespace model
    {
      namespace solver
      {
      }
    }
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace bio
{
  namespace xml
  {
    namespace model
    {
      namespace solver
      {
        void
        operator<< (::xercesc::DOMElement&, const FiniteDifferences&);

        void
        operator<< (::xercesc::DOMElement&, const Explicit1D&);

        void
        operator<< (::xercesc::DOMElement&, const Implicit1D&);

        void
        operator<< (::xercesc::DOMElement&, const Explicit2D&);

        void
        operator<< (::xercesc::DOMElement&, const Implicit2D&);

        void
        operator<< (::xercesc::DOMElement&, const Axis&);

        void
        operator<< (::xercesc::DOMElement&, const ConstantAxisPart&);

        void
        operator<< (::xercesc::DOMElement&, const BilinearAxisPart&);

        void
        operator<< (::xercesc::DOMElement&, const ConcentrationProfile&);

        void
        operator<< (::xercesc::DOMElement&, const CurrentDensity&);

        void
        operator<< (::xercesc::DOMElement&, const AveragedConcentration&);

        void
        operator<< (::xercesc::DOMElement&, const SteadyStateHalfTime&);

        void
        operator<< (::xercesc::DOMElement&, const SteadyState&);

        void
        operator<< (::xercesc::DOMElement&, const Kinetic&);

        void
        operator<< (::xercesc::DOMElement&, const StopCondition&);

        void
        operator<< (::xercesc::DOMAttr&, const StopCondition&);

        void
        operator<< (::xsd::cxx::tree::list_stream< char >&,
                    const StopCondition&);

        void
        operator<< (::xercesc::DOMElement&, const StopConditionValidAfter&);

        void
        operator<< (::xercesc::DOMElement&, const FailIfAbove&);

        void
        operator<< (::xercesc::DOMElement&, const FailIfInvalidConcentrations&);

        void
        operator<< (::xercesc::DOMAttr&, const FailIfInvalidConcentrations&);

        void
        operator<< (::xsd::cxx::tree::list_stream< char >&,
                    const FailIfInvalidConcentrations&);

        void
        operator<< (::xercesc::DOMElement&, const FailISumOfConcentrationsNonConst&);

        void
        operator<< (::xercesc::DOMElement&, const CurrentDensityGradient&);

        void
        operator<< (::xercesc::DOMElement&, const TimeStepAdjuster&);

        void
        operator<< (::xercesc::DOMAttr&, const TimeStepAdjuster&);

        void
        operator<< (::xsd::cxx::tree::list_stream< char >&,
                    const TimeStepAdjuster&);

        void
        operator<< (::xercesc::DOMElement&, const SimpleTimeStepAdjuster&);
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // MODEL_SOLVER_HXX
